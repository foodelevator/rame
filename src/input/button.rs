use super::INPUT_STATE;

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Button {
	Unknown,
	MouseLeft,
	MouseRight,
	MouseMiddle,
	Mouse4,
	Mouse5,
	Mouse6,
	Mouse7,
	Mouse8,
	LShift,
	LCtrl,
	LAlt,
	LSuper,
	RShift,
	RCtrl,
	RAlt,
	RSuper,
	Tab,
	CapsLock,
	Backspace,
	Esc,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	F9,
	F10,
	F11,
	F12,
	PrintScreen,
	ScrollLock,
	Pause,
	Insert,
	Delete,
	Home,
	End,
	PgUp,
	PgDown,
	Menu,
	ArrowLeft,
	ArrowUp,
	ArrowRight,
	ArrowDown,
	Tilde,
	Num1,
	Num2,
	Num3,
	Num4,
	Num5,
	Num6,
	Num7,
	Num8,
	Num9,
	Num0,
	Q,
	W,
	E,
	R,
	T,
	Y,
	U,
	I,
	O,
	P,
	A,
	S,
	D,
	F,
	G,
	H,
	J,
	K,
	L,
	Z,
	X,
	C,
	V,
	B,
	N,
	M,
	Space,
	Minus,
	Equals,
	BracketLeft,
	BracketRight,
	Backslash,
	Semicolon,
	Apostrophe,
	Enter,
	Comma,
	Period,
	Slash,
	// Button to the right of left shift on some kbd layouts
	NumPad0,
	NumPad1,
	NumPad2,
	NumPad3,
	NumPad4,
	NumPad5,
	NumPad6,
	NumPad7,
	NumPad8,
	NumPad9,
	NumLock,
	NumPadDec,
	NumPadDiv,
	NumPadMult,
	NumPadSub,
	NumPadAdd,
	NumPadEq,
	NumPadEnter,
}

impl Button {
	pub fn is_pressed(self) -> bool {
		use Button::*;
		unsafe {
			match self {
				Unknown => false,
				MouseLeft => INPUT_STATE.mouse_left,
				MouseRight => INPUT_STATE.mouse_right,
				MouseMiddle => INPUT_STATE.mouse_middle,
				Mouse4 => INPUT_STATE.mouse4,
				Mouse5 => INPUT_STATE.mouse5,
				Mouse6 => INPUT_STATE.mouse6,
				Mouse7 => INPUT_STATE.mouse7,
				Mouse8 => INPUT_STATE.mouse8,
				LShift => INPUT_STATE.l_shift,
				LCtrl => INPUT_STATE.l_ctrl,
				LAlt => INPUT_STATE.l_alt,
				LSuper => INPUT_STATE.l_super,
				RShift => INPUT_STATE.r_shift,
				RCtrl => INPUT_STATE.r_ctrl,
				RAlt => INPUT_STATE.r_alt,
				RSuper => INPUT_STATE.r_super,
				Tab => INPUT_STATE.tab,
				CapsLock => INPUT_STATE.caps_lock,
				Backspace => INPUT_STATE.backspace,
				Esc => INPUT_STATE.esc,
				F1 => INPUT_STATE.f1,
				F2 => INPUT_STATE.f2,
				F3 => INPUT_STATE.f3,
				F4 => INPUT_STATE.f4,
				F5 => INPUT_STATE.f5,
				F6 => INPUT_STATE.f6,
				F7 => INPUT_STATE.f7,
				F8 => INPUT_STATE.f8,
				F9 => INPUT_STATE.f9,
				F10 => INPUT_STATE.f10,
				F11 => INPUT_STATE.f11,
				F12 => INPUT_STATE.f12,
				PrintScreen => INPUT_STATE.print_screen,
				ScrollLock => INPUT_STATE.scroll_lock,
				Pause => INPUT_STATE.pause,
				Insert => INPUT_STATE.insert,
				Delete => INPUT_STATE.delete,
				Home => INPUT_STATE.home,
				End => INPUT_STATE.end,
				PgUp => INPUT_STATE.pg_up,
				PgDown => INPUT_STATE.pg_down,
				Menu => INPUT_STATE.menu,
				ArrowLeft => INPUT_STATE.arrow_left,
				ArrowUp => INPUT_STATE.arrow_up,
				ArrowRight => INPUT_STATE.arrow_right,
				ArrowDown => INPUT_STATE.arrow_down,
				Tilde => INPUT_STATE.tilde,
				Num1 => INPUT_STATE.num1,
				Num2 => INPUT_STATE.num2,
				Num3 => INPUT_STATE.num3,
				Num4 => INPUT_STATE.num4,
				Num5 => INPUT_STATE.num5,
				Num6 => INPUT_STATE.num6,
				Num7 => INPUT_STATE.num7,
				Num8 => INPUT_STATE.num8,
				Num9 => INPUT_STATE.num9,
				Num0 => INPUT_STATE.num0,
				Q => INPUT_STATE.q,
				W => INPUT_STATE.w,
				E => INPUT_STATE.e,
				R => INPUT_STATE.r,
				T => INPUT_STATE.t,
				Y => INPUT_STATE.y,
				U => INPUT_STATE.u,
				I => INPUT_STATE.i,
				O => INPUT_STATE.o,
				P => INPUT_STATE.p,
				A => INPUT_STATE.a,
				S => INPUT_STATE.s,
				D => INPUT_STATE.d,
				F => INPUT_STATE.f,
				G => INPUT_STATE.g,
				H => INPUT_STATE.h,
				J => INPUT_STATE.j,
				K => INPUT_STATE.k,
				L => INPUT_STATE.l,
				Z => INPUT_STATE.z,
				X => INPUT_STATE.x,
				C => INPUT_STATE.c,
				V => INPUT_STATE.v,
				B => INPUT_STATE.b,
				N => INPUT_STATE.n,
				M => INPUT_STATE.m,
				Space => INPUT_STATE.space,
				Minus => INPUT_STATE.minus,
				Equals => INPUT_STATE.equals,
				BracketLeft => INPUT_STATE.bracket_left,
				BracketRight => INPUT_STATE.bracket_right,
				Backslash => INPUT_STATE.backslash,
				Semicolon => INPUT_STATE.semicolon,
				Apostrophe => INPUT_STATE.apostrophe,
				Enter => INPUT_STATE.enter,
				Comma => INPUT_STATE.comma,
				Period => INPUT_STATE.period,
				Slash => INPUT_STATE.slash,
				NumPad0 => INPUT_STATE.numpad0,
				NumPad1 => INPUT_STATE.numpad1,
				NumPad2 => INPUT_STATE.numpad2,
				NumPad3 => INPUT_STATE.numpad3,
				NumPad4 => INPUT_STATE.numpad4,
				NumPad5 => INPUT_STATE.numpad5,
				NumPad6 => INPUT_STATE.numpad6,
				NumPad7 => INPUT_STATE.numpad7,
				NumPad8 => INPUT_STATE.numpad8,
				NumPad9 => INPUT_STATE.numpad9,
				NumLock => INPUT_STATE.numlock,
				NumPadDec => INPUT_STATE.numpad_dec,
				NumPadDiv => INPUT_STATE.numpad_div,
				NumPadMult => INPUT_STATE.numpad_mult,
				NumPadSub => INPUT_STATE.numpad_sub,
				NumPadAdd => INPUT_STATE.numpad_add,
				NumPadEq => INPUT_STATE.numpad_eq,
				NumPadEnter => INPUT_STATE.numpad_enter,
			}
		}
	}
}
